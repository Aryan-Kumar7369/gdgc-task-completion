<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Real-time Leaderboard</title>
    
    <!-- Tailwind CSS for styling -->
    <script src="https://cdn.tailwindcss.com" defer></script>
    
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    
    <!-- Google Fonts: Inter -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-image: url('https://images.unsplash.com/photo-1444080748397-f442aa95c3e5?fm=jpg&q=60&w=3000&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8bmlnaHQlMjBza3klMjB3YWxscGFwZXJ8ZW58MHx8MHx8fDA%3D');
            background-size: cover;
            background-position: center;
            overflow: hidden; /* Prevents scrollbars on the main body */
        }
        
        .app-container {
           
            width: 100%;
            height: 100vh;
            max-height: 900px;
            /* Glassmorphism effect */
            background-color: rgba(20, 20, 20, 0.4); /* Semi-transparent background */
            backdrop-filter: blur(25px);
            -webkit-backdrop-filter: blur(25px); /* Safari support */
            border-radius: 30px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            display: flex;
            flex-direction: column;
            position: relative;
        }

        /* Custom styles for podium elements */
        .podium-item-1 { /* 2nd Place */
            height: 100px;
            align-self: flex-end;
        }
        .podium-item-2 { /* 1st Place */
            height: 120px;
            align-self: flex-end;
        }
        .podium-item-3 { /* 3rd Place */
            height: 90px;
            align-self: flex-end;
        }
        
        /* Style for editable names */
        [contenteditable]:focus {
            outline: 2px solid #3b82f6;
            border-radius: 4px;
            background-color: rgba(59, 130, 246, 0.2);
            box-shadow: 0 0 5px rgba(59, 130, 246, 0.5);
        }
    </style>
</head>
<body class="flex justify-center items-center p-4">

    <!-- App Container -->
    <div class="app-container text-white overflow-hidden shadow-2xl">
        
        <!-- Header -->
        <header class="relative flex-shrink-0 flex items-center justify-center p-4">
            <h1 class="text-4xl font-bold text-white">Leaderboard</h1>
            <!-- <div class="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 bg-black/30 rounded-full w-8 h-8 flex items-center justify-center cursor-pointer">
                <i class="fas fa-times text-lg text-white"></i>
            </div> -->
            <div></div> <!-- Spacer -->
        </header>
        
        <!-- Demo Mode Warning -->
        <div id="demo-warning" class="hidden text-center bg-yellow-500/20 text-yellow-300 p-2 text-xs mx-4 rounded-lg">
            App is in demo mode. Changes are not saved. Add your Firebase config to enable real-time features.
        </div>


        <!-- Podium Section (will be populated by JavaScript) -->
        <div id="podium-container" class="flex-shrink-0 flex justify-center items-end h-48 px-4 gap-2 pt-2">
            <p class="text-gray-300">Loading Podium...</p>
        </div>

        <!-- Leaderboard List -->
        <main class="flex-1 bg-white/5 rounded-t-[40px] mt-4 p-4 overflow-y-auto pb-24">
            <div class="space-y-4" id="leaderboard-list">
                <p class="text-gray-300 text-center mt-8">Initializing App...</p>
            </div>
        </main>

        <!-- Bottom Navigation -->
        <nav class="absolute bottom-6 left-1/2 -translate-x-1/2">
            <div class="relative w-[160px] h-[70px] bg-gradient-to-r from-red-500 via-yellow-400 to-blue-500 rounded-[35px] p-1 shadow-lg">
                <div class="w-full h-full bg-black rounded-[30px] flex items-center justify-around px-2">
                    <!-- Home Button -->
                     <a href="/">
                         
                         <div class="w-[60px] h-[60px] bg-white rounded-[25px] flex items-center justify-center cursor-pointer">
                             <svg class="w-8 h-8 text-black" fill="currentColor" viewBox="0 0 20 20"><path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"></path></svg>
                            </div>
                        </a>
                    <!-- Chart Button -->
                    <div class="w-8 h-8 flex items-end justify-between cursor-pointer">
                         <svg class="w-8 h-8 text-gray-400" fill="currentColor" viewBox="0 0 24 24">
                           <path d="M4 19h4V9H4v10zm6 0h4V5h-4v14zm6 0h4v-6h-4v6z"></path>
                         </svg>
                    </div>
                </div>
            </div>
        </nav>
    </div>

    <!-- Firebase and custom script -->
    <script type="module">
        // Firebase SDK imports
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, collection, doc, onSnapshot, updateDoc, query, getDocs, writeBatch } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // --- FIREBASE CONFIGURATION ---
        const getFirebaseConfig = () => {
            const firebaseConfigString = typeof __firebase_config !== 'undefined' ? __firebase_config : '';
            if (firebaseConfigString && firebaseConfigString.trim() !== '') {
                try {
                    const config = JSON.parse(firebaseConfigString);
                    if (config.apiKey && config.apiKey !== "DEMO") {
                        return config;
                    }
                } catch (e) {
                    console.error("Could not parse injected Firebase config.");
                }
            }

            // --- IMPORTANT: PASTE YOUR FIREBASE CONFIG HERE ---
            // If the special `__firebase_config` variable is not available,
            // we use this placeholder. Replace it with your own project's config.
            console.warn("Using placeholder Firebase config. Real-time features are disabled.");
            document.getElementById('demo-warning').classList.remove('hidden');
            return {
                apiKey: "DEMO",
                authDomain: "DEMO.firebaseapp.com",
                projectId: "DEMO",
                storageBucket: "DEMO.appspot.com",
                messagingSenderId: "DEMO",
                appId: "DEMO"
            };
        };

        const firebaseConfig = getFirebaseConfig();
        const isDemoMode = firebaseConfig.apiKey === "DEMO";
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'leaderboard-app';

        let app, auth, db, leaderboardCol;

        if (firebaseConfig) {
            app = initializeApp(firebaseConfig);
            auth = getAuth(app);
            db = getFirestore(app);
            const leaderboardCollectionPath = `/artifacts/${appId}/public/data/leaderboard`;
            leaderboardCol = collection(db, leaderboardCollectionPath);
        }

        // --- INITIAL DATA (Used for Demo Mode) ---
        const initialUsers = [
            { id: '1', rank: 1, name: 'Alice', username: '@alice', score: 610, trend: 'up' },
            { id: '2', rank: 2, name: 'Bob', username: '@bob', score: 600, trend: 'down' },
            { id: '3', rank: 3, name: 'Charlie', username: '@charlie', score: 580, trend: 'up' },
            { id: '4', rank: 4, name: "Manash", username: "@username", score: 500, trend: "down" },
            { id: '5', rank: 5, name: "Diana", username: "@diana", score: 489, trend: "up" },
            { id: '6', rank: 6, name: "Ethan", username: "@ethan", score: 470, trend: "up" },
            { id: '7', rank: 7, name: "Fiona", username: "@fiona", score: 435, trend: "down" },
            { id: '8', rank: 8, name: "George", username: "@george", score: 420, trend: "down" },
            { id: '9', rank: 9, name: "Hannah", username: "@hannah", score: 413, trend: "down" },
            { id: '10', rank: 10, name: "Ian", username: "@ian", score: 400, trend: "up" },
            { id: '11', rank: 11, name: "Jane", username: "@jane", score: 380, trend: "down" },
            { id: '12', rank: 12, name: "Kevin", username: "@kevin", score: 378, trend: "down" },
            { id: '13', rank: 13, name: "Laura", username: "@laura", score: 364, trend: "down" },
            { id: '14', rank: 14, name: "Mike", username: "@mike", score: 350, trend: "down" },
        ];


        // --- UI RENDERING ---
        const podiumContainer = document.getElementById('podium-container');
        const leaderboardList = document.getElementById('leaderboard-list');

        const renderLeaderboard = (users) => {
            const sortedUsers = [...users].sort((a, b) => b.score - a.score);

            // Render Podium
            podiumContainer.innerHTML = '';
            const topThree = sortedUsers.slice(0, 3);
            if (topThree.length >= 3) {
                const [first, second, third] = topThree;
                const podiumOrder = [second, first, third];
                const podiumClasses = ['podium-item-1', 'podium-item-2', 'podium-item-3'];
                podiumOrder.forEach((user, index) => {
                    const podiumItem = document.createElement('div');
                    podiumItem.className = `${podiumClasses[index]} flex flex-col items-center`;
                    podiumItem.innerHTML = `
                        <div class="bg-white/10 rounded-full flex items-center justify-center mb-2 w-16 h-16 text-4xl">
                            <i class="fas fa-user text-white/70"></i>
                        </div>
                        <div class="bg-white/10 text-white rounded-lg text-center w-24 p-2">
                            <p class="font-bold" contenteditable="true" data-id="${user.id}">${user.name}</p>
                            <p class="text-sm opacity-80">${user.score}</p>
                        </div>
                    `;
                    podiumContainer.appendChild(podiumItem);
                });
            } else {
                podiumContainer.innerHTML = '<p class="text-gray-300">Not enough players for a podium.</p>';
            }

            // Render List
            leaderboardList.innerHTML = '';
            const restOfUsers = sortedUsers.slice(3);
            if (restOfUsers.length > 0) {
                restOfUsers.forEach((user, index) => {
                    const rank = index + 4;
                    const trendIcon = user.trend === 'up' ? '<i class="fas fa-caret-up text-green-400"></i>' : '<i class="fas fa-caret-down text-red-400"></i>';
                    const userItem = document.createElement('div');
                    userItem.className = 'flex items-center gap-4';
                    userItem.innerHTML = `
                        <div class="bg-green-500/20 text-green-300 rounded-full w-8 h-8 flex items-center justify-center font-bold flex-shrink-0">${rank}</div>
                        <div class="bg-white/10 rounded-full w-10 h-10 flex items-center justify-center text-2xl text-white/70 flex-shrink-0"><i class="fas fa-user"></i></div>
                        <div class="flex-grow"><p class="font-bold text-white" contenteditable="true" data-id="${user.id}">${user.name}</p><p class="text-sm text-gray-300">${user.username}</p></div>
                        <div class="text-right flex items-center gap-3 flex-shrink-0">
                             <button class="score-btn text-lg p-1 w-7 h-7 flex items-center justify-center rounded-full bg-white/10 hover:bg-white/20 transition-colors" data-id="${user.id}" data-score="${user.score}" data-action="decrement">-</button>
                             <div class="text-center w-12"><p class="font-bold text-lg text-white">${user.score}</p>${trendIcon}</div>
                             <button class="score-btn text-lg p-1 w-7 h-7 flex items-center justify-center rounded-full bg-white/10 hover:bg-white/20 transition-colors" data-id="${user.id}" data-score="${user.score}" data-action="increment">+</button>
                        </div>
                    `;
                    leaderboardList.appendChild(userItem);
                });
            }

            // Add event listeners
            document.querySelectorAll('[contenteditable="true"]').forEach(el => el.addEventListener('blur', handleNameUpdate));
            document.querySelectorAll('.score-btn').forEach(btn => btn.addEventListener('click', handleScoreUpdate));
        };
        
        // --- DATA HANDLING ---
        const handleNameUpdate = async (event) => {
            if (isDemoMode) return;
            const { id } = event.target.dataset;
            const newName = event.target.innerText.trim();
            if (!id || !newName) return;
            await updateDoc(doc(db, leaderboardCollectionPath, id), { name: newName });
        };

        const handleScoreUpdate = async (event) => {
            if (isDemoMode) return;
            const { id, score, action } = event.currentTarget.dataset;
            const newScore = action === 'increment' ? parseInt(score) + 10 : parseInt(score) - 10;
            await updateDoc(doc(db, leaderboardCollectionPath, id), { score: newScore });
        };

        // --- MAIN EXECUTION ---
        const main = async () => {
            if (isDemoMode) {
                renderLeaderboard(initialUsers); // Use static data for demo
                return;
            }

            try {
                if (typeof __initial_auth_token !== 'undefined') {
                    await signInWithCustomToken(auth, __initial_auth_token);
                } else {
                    await signInAnonymously(auth);
                }
                onSnapshot(query(leaderboardCol), (snapshot) => {
                    if (snapshot.empty) { // Seed data if collection is empty
                        const batch = writeBatch(db);
                        initialUsers.forEach(user => {
                           const userRef = doc(leaderboardCol, user.id);
                           batch.set(userRef, user);
                        });
                        batch.commit();
                    } else {
                        const users = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                        renderLeaderboard(users);
                    }
                });
            } catch (error) {
                console.error("App initialization failed:", error);
                leaderboardList.innerHTML = `<p class="text-red-400 text-center mt-8">Could not connect to the database.</p>`;
            }
        };

        main();
    </script>
</body>
</html>